$date
	Wed Feb  5 11:02:13 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 18 ! rBus [17:0] $end
$var wire 1 " done $end
$var reg 1 # clk $end
$var reg 2 $ func [1:0] $end
$var reg 1 % rst $end
$var reg 1 & start $end
$var reg 16 ' xBus [15:0] $end
$scope module msc $end
$var wire 1 # clk $end
$var wire 2 ( func [1:0] $end
$var wire 1 % rst $end
$var wire 1 & start $end
$var wire 1 ) startCos $end
$var wire 1 * startExp $end
$var wire 1 + startLn $end
$var wire 1 , startSin $end
$var wire 16 - xBus [15:0] $end
$var wire 18 . sinRBus [17:0] $end
$var wire 1 / sinDone $end
$var wire 18 0 rBus [17:0] $end
$var wire 18 1 lnRBus [17:0] $end
$var wire 1 2 lnDone $end
$var wire 18 3 expRBus [17:0] $end
$var wire 1 4 expDone $end
$var wire 18 5 cosRBus [17:0] $end
$var wire 1 6 cosDone $end
$var wire 1 " Done $end
$scope module cosInst $end
$var wire 1 # clk $end
$var wire 1 % rst $end
$var wire 1 ) start $end
$var wire 16 7 xBus [15:0] $end
$var wire 1 8 signBit $end
$var wire 1 9 selPow $end
$var wire 18 : rBus [17:0] $end
$var wire 1 ; ldX $end
$var wire 1 < ldT $end
$var wire 1 = ldCos $end
$var wire 1 > initT1 $end
$var wire 1 ? initCos1 $end
$var wire 1 @ init0 $end
$var wire 1 6 done $end
$var wire 1 A cntUp $end
$var wire 1 B cnt8 $end
$var wire 1 C addSub $end
$scope module cosControl $end
$var wire 1 # clk $end
$var wire 1 % rst $end
$var wire 1 ) start $end
$var wire 1 8 signBit $end
$var wire 1 B cnt8 $end
$var parameter 3 D ACCUM $end
$var parameter 3 E DONE $end
$var parameter 3 F IDLE $end
$var parameter 3 G INIT $end
$var parameter 3 H ITERATE1 $end
$var parameter 3 I ITERATE2 $end
$var reg 1 C addSub $end
$var reg 1 A cntUp $end
$var reg 1 6 done $end
$var reg 1 @ init0 $end
$var reg 1 ? initCos1 $end
$var reg 1 > initT1 $end
$var reg 1 = ldCos $end
$var reg 1 < ldT $end
$var reg 1 ; ldX $end
$var reg 3 J next [2:0] $end
$var reg 1 9 selPow $end
$var reg 3 K state [2:0] $end
$upscope $end
$scope module cosDataPath $end
$var wire 1 C addSub $end
$var wire 1 # clk $end
$var wire 1 A cntUp $end
$var wire 1 @ init0 $end
$var wire 1 L initCos1 $end
$var wire 1 > initT1 $end
$var wire 1 = ldCos $end
$var wire 1 < ldT $end
$var wire 1 ; ldX $end
$var wire 16 M multOut [15:0] $end
$var wire 18 N rBus [17:0] $end
$var wire 1 % rst $end
$var wire 1 9 selPow $end
$var wire 16 O xBus [15:0] $end
$var wire 16 P xSquared [15:0] $end
$var wire 16 Q xOut [15:0] $end
$var wire 16 R tOut [15:0] $end
$var wire 1 8 signBit $end
$var wire 16 S lutOut [15:0] $end
$var wire 18 T cosOut [17:0] $end
$var wire 16 U computedTerm [15:0] $end
$var wire 3 V cntOut [2:0] $end
$var wire 1 B cnt8 $end
$var wire 18 W addSubOut [17:0] $end
$scope module cntr $end
$var wire 1 # clk $end
$var wire 1 A cntUp $end
$var wire 1 @ init0 $end
$var wire 1 % rst $end
$var parameter 32 X m $end
$var reg 3 Y cnt [2:0] $end
$upscope $end
$scope module cosReg $end
$var wire 1 # clk $end
$var wire 18 Z in [17:0] $end
$var wire 1 L init $end
$var wire 1 = load $end
$var wire 1 % rst $end
$var parameter 18 [ INIT_VALUE $end
$var parameter 32 \ n $end
$var reg 18 ] out [17:0] $end
$upscope $end
$scope module lut $end
$var wire 3 ^ addr [2:0] $end
$var wire 16 _ out [15:0] $end
$var reg 16 ` dataOut [15:0] $end
$upscope $end
$scope module tReg $end
$var wire 1 # clk $end
$var wire 16 a in [15:0] $end
$var wire 1 > init $end
$var wire 1 < load $end
$var wire 1 % rst $end
$var parameter 16 b INIT_VALUE $end
$var parameter 32 c n $end
$var reg 16 d out [15:0] $end
$upscope $end
$scope module xReg $end
$var wire 1 # clk $end
$var wire 16 e in [15:0] $end
$var wire 1 f init $end
$var wire 1 ; load $end
$var wire 1 % rst $end
$var parameter 16 g INIT_VALUE $end
$var parameter 32 h n $end
$var reg 16 i out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module expInst $end
$var wire 1 # clk $end
$var wire 1 % rst $end
$var wire 1 * start $end
$var wire 16 j xBus [15:0] $end
$var wire 1 k selXorI $end
$var wire 18 l rBus [17:0] $end
$var wire 1 m ldX $end
$var wire 1 n ldT $end
$var wire 1 o ldExp $end
$var wire 1 p initT1 $end
$var wire 1 q initExp1 $end
$var wire 1 r init0 $end
$var wire 1 4 done $end
$var wire 1 s cntUp $end
$var wire 1 t cnt8 $end
$scope module expControl $end
$var wire 1 # clk $end
$var wire 1 % rst $end
$var wire 1 * start $end
$var wire 1 t cnt8 $end
$var parameter 3 u ACCUM $end
$var parameter 3 v DONE $end
$var parameter 3 w IDLE $end
$var parameter 3 x INIT $end
$var parameter 3 y ITERATE1 $end
$var parameter 3 z ITERATE2 $end
$var reg 1 s cntUp $end
$var reg 1 4 done $end
$var reg 1 r init0 $end
$var reg 1 q initExp1 $end
$var reg 1 p initT1 $end
$var reg 1 o ldExp $end
$var reg 1 n ldT $end
$var reg 1 m ldX $end
$var reg 3 { next [2:0] $end
$var reg 1 k selXorI $end
$var reg 3 | state [2:0] $end
$upscope $end
$scope module expDataPath $end
$var wire 1 # clk $end
$var wire 1 s cntUp $end
$var wire 1 r init0 $end
$var wire 1 q initExp1 $end
$var wire 1 p initT1 $end
$var wire 1 o ldExp $end
$var wire 1 n ldT $end
$var wire 1 m ldX $end
$var wire 1 } overflow $end
$var wire 18 ~ rBus [17:0] $end
$var wire 1 % rst $end
$var wire 1 k selXorI $end
$var wire 16 !" xBus [15:0] $end
$var wire 16 "" xOut [15:0] $end
$var wire 16 #" tOut [15:0] $end
$var wire 18 $" nextExp [17:0] $end
$var wire 16 %" muxOut [15:0] $end
$var wire 32 &" multResult [31:0] $end
$var wire 16 '" multOut [15:0] $end
$var wire 16 (" lutOut [15:0] $end
$var wire 18 )" expOut [17:0] $end
$var wire 3 *" cntOut [2:0] $end
$var wire 1 t cnt8 $end
$var wire 18 +" addOut [17:0] $end
$scope module cntr $end
$var wire 1 # clk $end
$var wire 1 s cntUp $end
$var wire 1 r init0 $end
$var wire 1 % rst $end
$var parameter 32 ," m $end
$var reg 3 -" cnt [2:0] $end
$upscope $end
$scope module eReg $end
$var wire 1 # clk $end
$var wire 18 ." in [17:0] $end
$var wire 1 q init $end
$var wire 1 o load $end
$var wire 1 % rst $end
$var parameter 18 /" INIT_VALUE $end
$var parameter 32 0" n $end
$var reg 18 1" out [17:0] $end
$upscope $end
$scope module lut $end
$var wire 3 2" addr [2:0] $end
$var wire 16 3" out [15:0] $end
$var reg 16 4" dataOut [15:0] $end
$upscope $end
$scope module tReg $end
$var wire 1 # clk $end
$var wire 16 5" in [15:0] $end
$var wire 1 p init $end
$var wire 1 n load $end
$var wire 1 % rst $end
$var parameter 16 6" INIT_VALUE $end
$var parameter 32 7" n $end
$var reg 16 8" out [15:0] $end
$upscope $end
$scope module xReg $end
$var wire 1 # clk $end
$var wire 16 9" in [15:0] $end
$var wire 1 :" init $end
$var wire 1 m load $end
$var wire 1 % rst $end
$var parameter 16 ;" INIT_VALUE $end
$var parameter 32 <" n $end
$var reg 16 =" out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module lnInst $end
$var wire 1 # clk $end
$var wire 1 % rst $end
$var wire 1 + start $end
$var wire 16 >" xBus [15:0] $end
$var wire 1 ?" signBit $end
$var wire 1 @" selSign $end
$var wire 18 A" lnOut [17:0] $end
$var wire 1 B" ldX $end
$var wire 1 C" ldTerm $end
$var wire 1 D" ldSum $end
$var wire 1 E" initTerm $end
$var wire 1 F" init0 $end
$var wire 1 2 done $end
$var wire 1 G" cntUp $end
$var wire 1 H" cnt8 $end
$scope module lnControl $end
$var wire 1 # clk $end
$var wire 1 % rst $end
$var wire 1 + start $end
$var wire 1 ?" signBit $end
$var wire 1 H" cnt8 $end
$var parameter 3 I" ACCUM $end
$var parameter 3 J" DONE $end
$var parameter 3 K" IDLE $end
$var parameter 3 L" INIT $end
$var parameter 3 M" ITERATE1 $end
$var parameter 3 N" ITERATE2 $end
$var reg 1 G" cntUp $end
$var reg 1 2 done $end
$var reg 1 F" init0 $end
$var reg 1 E" initTerm $end
$var reg 1 D" ldSum $end
$var reg 1 C" ldTerm $end
$var reg 1 B" ldX $end
$var reg 3 O" next [2:0] $end
$var reg 1 @" selSign $end
$var reg 3 P" state [2:0] $end
$upscope $end
$scope module lnDataPath $end
$var wire 1 # clk $end
$var wire 1 G" cntUp $end
$var wire 1 F" init0 $end
$var wire 1 E" initTerm $end
$var wire 1 D" ldSum $end
$var wire 1 C" ldTerm $end
$var wire 1 B" ldX $end
$var wire 16 Q" newTerm [15:0] $end
$var wire 16 R" product [15:0] $end
$var wire 1 % rst $end
$var wire 1 @" selSign $end
$var wire 16 S" xBus [15:0] $end
$var wire 16 T" xOut [15:0] $end
$var wire 16 U" termOut [15:0] $end
$var wire 18 V" sumCalc [17:0] $end
$var wire 1 ?" signBit $end
$var wire 16 W" lutOut [15:0] $end
$var wire 18 X" lnOut [17:0] $end
$var wire 3 Y" cntOut [2:0] $end
$var wire 1 H" cnt8 $end
$scope module cntr $end
$var wire 1 # clk $end
$var wire 1 G" cntUp $end
$var wire 1 F" init0 $end
$var wire 1 % rst $end
$var parameter 32 Z" m $end
$var reg 3 [" cnt [2:0] $end
$upscope $end
$scope module lut $end
$var wire 3 \" addr [2:0] $end
$var wire 16 ]" out [15:0] $end
$var reg 16 ^" dataOut [15:0] $end
$upscope $end
$scope module sumReg $end
$var wire 1 # clk $end
$var wire 18 _" in [17:0] $end
$var wire 1 `" init $end
$var wire 1 D" load $end
$var wire 1 % rst $end
$var parameter 18 a" INIT_VALUE $end
$var parameter 32 b" n $end
$var reg 18 c" out [17:0] $end
$upscope $end
$scope module termReg $end
$var wire 1 # clk $end
$var wire 16 d" in [15:0] $end
$var wire 1 E" init $end
$var wire 1 C" load $end
$var wire 1 % rst $end
$var parameter 16 e" INIT_VALUE $end
$var parameter 32 f" n $end
$var reg 16 g" out [15:0] $end
$upscope $end
$scope module xReg $end
$var wire 1 # clk $end
$var wire 16 h" in [15:0] $end
$var wire 1 i" init $end
$var wire 1 B" load $end
$var wire 1 % rst $end
$var parameter 16 j" INIT_VALUE $end
$var parameter 32 k" n $end
$var reg 16 l" out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module sinInst $end
$var wire 1 # clk $end
$var wire 1 % rst $end
$var wire 1 m" signBit $end
$var wire 1 , start $end
$var wire 16 n" xBus [15:0] $end
$var wire 18 o" rBus [17:0] $end
$var wire 1 p" ldX $end
$var wire 1 q" ldT $end
$var wire 1 r" ldSin $end
$var wire 1 s" initT $end
$var wire 1 / done $end
$var wire 1 t" cntUp $end
$var wire 1 u" cnt8 $end
$scope module sinControl $end
$var wire 1 # clk $end
$var wire 1 % rst $end
$var wire 1 m" signBit $end
$var wire 1 , start $end
$var wire 1 u" cnt8 $end
$var parameter 3 v" ACCUM $end
$var parameter 3 w" DONE $end
$var parameter 3 x" IDLE $end
$var parameter 3 y" INIT $end
$var parameter 3 z" ITERATE1 $end
$var parameter 3 {" ITERATE2 $end
$var reg 1 |" addSub $end
$var reg 1 t" cntUp $end
$var reg 1 / done $end
$var reg 1 s" initT $end
$var reg 1 r" ldSin $end
$var reg 1 q" ldT $end
$var reg 1 p" ldX $end
$var reg 3 }" next [2:0] $end
$var reg 3 ~" state [2:0] $end
$upscope $end
$scope module sinDataPath $end
$var wire 1 m" addSub $end
$var wire 1 # clk $end
$var wire 1 t" cntUp $end
$var wire 1 !# init0 $end
$var wire 1 s" initT $end
$var wire 1 r" ldSin $end
$var wire 1 q" ldT $end
$var wire 1 p" ldX $end
$var wire 16 "# multOut [15:0] $end
$var wire 18 ## rBus [17:0] $end
$var wire 1 % rst $end
$var wire 1 m" signBit $end
$var wire 16 $# xBus [15:0] $end
$var wire 16 %# xSquared [15:0] $end
$var wire 16 &# xOut [15:0] $end
$var wire 16 '# tOut [15:0] $end
$var wire 18 (# sinOut [17:0] $end
$var wire 16 )# lutOut [15:0] $end
$var wire 1 *# firstTerm $end
$var wire 16 +# computedTerm [15:0] $end
$var wire 3 ,# cntOut [2:0] $end
$var wire 1 u" cnt8 $end
$var wire 18 -# addSubOut [17:0] $end
$scope module cntr $end
$var wire 1 # clk $end
$var wire 1 t" cntUp $end
$var wire 1 !# init0 $end
$var wire 1 % rst $end
$var parameter 32 .# m $end
$var reg 3 /# cnt [2:0] $end
$upscope $end
$scope module lut $end
$var wire 3 0# addr [2:0] $end
$var wire 16 1# out [15:0] $end
$var reg 16 2# dataOut [15:0] $end
$upscope $end
$scope module sinReg $end
$var wire 1 # clk $end
$var wire 18 3# in [17:0] $end
$var wire 1 4# init $end
$var wire 1 r" load $end
$var wire 1 % rst $end
$var parameter 18 5# INIT_VALUE $end
$var parameter 32 6# n $end
$var reg 18 7# out [17:0] $end
$upscope $end
$scope module tReg $end
$var wire 1 # clk $end
$var wire 16 8# in [15:0] $end
$var wire 1 s" init $end
$var wire 1 q" load $end
$var wire 1 % rst $end
$var parameter 16 9# INIT_VALUE $end
$var parameter 32 :# n $end
$var reg 16 ;# out [15:0] $end
$upscope $end
$scope module xReg $end
$var wire 1 # clk $end
$var wire 16 <# in [15:0] $end
$var wire 1 =# init $end
$var wire 1 p" load $end
$var wire 1 % rst $end
$var parameter 16 ># INIT_VALUE $end
$var parameter 32 ?# n $end
$var reg 16 @# out [15:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000 ?#
b0 >#
b10000 :#
b0 9#
b10010 6#
b0 5#
b11 .#
b11 {"
b10 z"
b1 y"
b0 x"
b101 w"
b100 v"
b10000 k"
b0 j"
b10000 f"
b0 e"
b10010 b"
b0 a"
b11 Z"
b11 N"
b10 M"
b1 L"
b0 K"
b101 J"
b100 I"
b10000 <"
b0 ;"
b10000 7"
b1111111111111111 6"
b10010 0"
b1111111111111111 /"
b11 ,"
b11 z
b10 y
b1 x
b0 w
b101 v
b100 u
b10000 h
b0 g
b10000 c
b1111111111111111 b
b10010 \
b1111111111111111 [
b11 X
b11 I
b10 H
b1 G
b0 F
b101 E
b100 D
$end
#0
$dumpvars
b0 @#
0=#
b100000000000000 <#
b0 ;#
b0 8#
b0 7#
04#
b0 3#
b1111111111111111 2#
b1111111111111111 1#
b0 0#
b0 /#
b0 -#
b0 ,#
b0 +#
1*#
b1111111111111111 )#
b0 (#
b0 '#
b0 &#
b0 %#
b100000000000000 $#
b0 ##
b0 "#
0!#
b0 ~"
b0 }"
0|"
0u"
0t"
0s"
0r"
0q"
0p"
b0 o"
b100000000000000 n"
0m"
b0 l"
0i"
b100000000000000 h"
b0 g"
b0 d"
b0 c"
0`"
b0 _"
b1111111111111111 ^"
b1111111111111111 ]"
b0 \"
b0 ["
b0 Y"
b0 X"
b1111111111111111 W"
b0 V"
b0 U"
b0 T"
b100000000000000 S"
b0 R"
b0 Q"
b0 P"
b0 O"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
b0 A"
0@"
0?"
b100000000000000 >"
b0 ="
0:"
b100000000000000 9"
b0 8"
b0 5"
b1111111111111111 4"
b1111111111111111 3"
b0 2"
b0 1"
b0 ."
b0 -"
b0 +"
b0 *"
b0 )"
b1111111111111111 ("
b0 '"
b0 &"
b1111111111111111 %"
b0 $"
b0 #"
b0 ""
b100000000000000 !"
b0 ~
0}
b0 |
b0 {
0t
0s
0r
0q
0p
0o
0n
0m
b0 l
0k
b100000000000000 j
b0 i
0f
b100000000000000 e
b0 d
b0 a
b1111111111111111 `
b1111111111111111 _
b0 ^
b0 ]
b0 Z
b0 Y
b0 W
b0 V
b1111111111111111 U
b0 T
b1111111111111111 S
b0 R
b0 Q
b0 P
b100000000000000 O
b0 N
b0 M
zL
b0 K
b0 J
0C
0B
0A
0@
0?
0>
0=
0<
0;
b0 :
09
08
b100000000000000 7
16
b0 5
14
b0 3
12
b0 1
b0 0
1/
b0 .
b100000000000000 -
0,
0+
0*
0)
b0 (
b100000000000000 '
0&
1%
b0 $
x#
1"
b0 !
$end
#20000
b1 {
14
1*
1&
0%
#30000
14
b0 {
0*
0&
#1050000
b1 }"
1/
1,
1&
b1 $
b1 (
#1060000
1/
b0 }"
0,
0&
#2080000
b1 J
16
1)
1&
b10 $
b10 (
#2090000
16
b0 J
0)
0&
#3110000
b1 O"
12
1+
1&
b11 $
b11 (
#3120000
12
b0 O"
0+
0&
#4140000
